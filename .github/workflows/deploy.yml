name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1

jobs:
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'dev' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Deploy Backend to ECS
      env:
        ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Update ECS service with new image
        aws ecs update-service \
          --cluster narrative-modeling-${ENVIRONMENT} \
          --service narrative-modeling-${ENVIRONMENT}-backend \
          --force-new-deployment \
          --desired-count 2
        
        # Wait for service to stabilize
        aws ecs wait services-stable \
          --cluster narrative-modeling-${ENVIRONMENT} \
          --services narrative-modeling-${ENVIRONMENT}-backend
    
    - name: Deploy Frontend to ECS
      env:
        ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Update ECS service with new image
        aws ecs update-service \
          --cluster narrative-modeling-${ENVIRONMENT} \
          --service narrative-modeling-${ENVIRONMENT}-frontend \
          --force-new-deployment \
          --desired-count 2
        
        # Wait for service to stabilize
        aws ecs wait services-stable \
          --cluster narrative-modeling-${ENVIRONMENT} \
          --services narrative-modeling-${ENVIRONMENT}-frontend
    
    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Deployment to ${{ github.event.inputs.environment || 'dev' }} ${{ job.status }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}